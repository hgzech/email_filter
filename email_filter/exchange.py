# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_exchange.ipynb.

# %% auto 0
__all__ = ['extract_domains', 'extract_domain', 'EmailObject', 'EmailClient']

# %% ../nbs/00_exchange.ipynb 3
import imaplib
import email
from email.header import decode_header
from datetime import datetime
import os
import tldextract
from email.utils import parseaddr, getaddresses

# %% ../nbs/00_exchange.ipynb 5
def extract_domains(addresses):
    return [extract_domain(a) for a in addresses]

def extract_domain(address):
    domain = address.split('@')[1]
    # Extract main domain from subdomain
    main_domain = tldextract.extract(domain)
    return f"{main_domain.domain}.{main_domain.suffix}"

class EmailObject:
    def __init__(self, sender, recipient, cc, bcc, subject, body, email_id):
        self.sender = self.get_all_addresses(sender)
        self.recipient = self.get_all_addresses(recipient)
        self.cc = self.get_all_addresses(cc)
        self.bcc = self.get_all_addresses(bcc)
        self.subject = subject
        self.body = body
        self.email_id = email_id

    def get_all_addresses(self, tofrom):
        if not tofrom:
            return []
        addresses = [a[1] for a in getaddresses(tofrom.split(','))]
        addresses = [a for a in addresses if '@' in a]
        return addresses

class EmailClient:
    def __init__(self, server, port, username, password):
        self.mail = imaplib.IMAP4_SSL(server, port)
        self.mail.login(username, password)

    def get_emails(self, from_folder = 'inbox', since_date=None):
        self.mail.select(f'"{from_folder}"')
    
        if since_date:
            since_date_str = since_date.strftime('%d-%b-%Y')
            status, messages = self.mail.search(None, f'SINCE {since_date_str}')
        else:
            status, messages = self.mail.search(None, "ALL")
    
        email_ids = messages[0].split()
        email_objects = []
    
        for i in range(0, len(email_ids), 100):  # Fetch 100 emails at a time
            batch = email_ids[i:i+100]
            batch_str = ','.join(map(lambda x: x.decode(), batch))
            status, msg_data = self.mail.fetch(batch_str, "(RFC822)")
            index = 0
            for response_part in msg_data:
                if isinstance(response_part, tuple):
                    msg = email.message_from_bytes(response_part[1])
                    current_id = batch[index]
                    index = index + 1
                    subject, encoding = decode_header(msg["Subject"])[0]
                    if isinstance(subject, bytes):
                        try:
                            subject = subject.decode(encoding if encoding else "utf-8")
                        except:
                            subject = ''
    
                    # Extract email text content only
                    body = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/plain":
                                try:
                                    body = part.get_payload(decode=True).decode('utf-8')
                                except UnicodeDecodeError:
                                    body = part.get_payload(decode=True).decode('utf-8', 'ignore')
                                break  # Once text content is found, no need to continue
                    else:
                        try:
                            body = msg.get_payload(decode=True).decode('utf-8')
                        except UnicodeDecodeError:
                            body = msg.get_payload(decode=True).decode('utf-8', 'ignore')

    
                    # Create email object and add to list
                    email_objects.append(EmailObject(msg["From"], msg["To"], msg["Cc"], msg["Bcc"], subject, body, current_id))
    
        return email_objects

    def move_email(self, email_object, target_folder):
        email_id = email_object.email_id
        
        # Ensure email_id is a byte-string
        if not isinstance(email_id, bytes):
            email_id = email_id.encode('utf-8')
            
        result = self.mail.copy(email_id, target_folder)
        if result[0] == 'OK':
            self.mail.store(email_id, '+FLAGS', '(\Deleted)')
            self.mail.expunge()

    def logout(self):
        self.mail.logout()
