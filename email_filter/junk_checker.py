# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_junk_checker.ipynb.

# %% auto 0
__all__ = ['DataStorage', 'JunkChecker']

# %% ../nbs/01_junk_checker.ipynb 3
from .exchange import EmailClient, extract_domain
import json
from datetime import datetime
import os

# %% ../nbs/01_junk_checker.ipynb 6
import os
import json

class DataStorage:
    def __init__(self, folder_path):
        self.folder_path = folder_path
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
    
    def _get_file_path(self, file_name):
        return os.path.join(self.folder_path, file_name)
    
    def write_to_json(self, file_name, data):
        file_path = self._get_file_path(file_name)
        with open(file_path, 'w') as f:
            json.dump(data, f, indent = 2)
    
    def read_from_json(self, file_name):
        file_path = self._get_file_path(file_name)
        if not os.path.exists(file_path):
            return None
        with open(file_path, 'r') as f:
            return json.load(f)
    




# %% ../nbs/01_junk_checker.ipynb 7
class JunkChecker:
    def __init__(self, email_client, storage):
        self.client = email_client

    def get_last_update_date(self):
        last_update = storage.read_from_json("last_update.json")
        if not last_update:
            last_update = datetime(2020, 7, 1)
        return last_update

    def update_whitelists(self):
        last_update = self.get_last_update_date()
        emails = email_client.get_emails(from_folder = "Sent Items", since_date=last_update, fetch_body = False)
        addresses = [email.recipient + email.cc + email.bcc for email in emails]
        addresses = list(set([a.lower() for alist in addresses for a in alist]))
        domains = list(set([extract_domain(address) for address in addresses]))
        storage.write_to_json("address_whitelist.json", addresses)
        storage.write_to_json("domain_whitelist.json", domains)
        
        
